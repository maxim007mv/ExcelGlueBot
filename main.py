import os
import logging
import sqlite3
import shutil
import time
from datetime import datetime
import pandas as pd
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    CallbackContext,
    CommandHandler,
    CallbackQueryHandler
)
from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename='bot.log',
    filemode='a'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TEMP_DIR = "temp_files"
RESULT_FILE = "result.xlsx"
DB_NAME = "files_db.sqlite"
MAX_FILES_PER_USER = 10

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã Excel
EXCEL_EXTENSIONS = ['xlsx', 'xls', 'xlsm', 'xlsb', 'odf', 'ods']
SUPPORTED_MIME_TYPES = [
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.ms-excel',
    'application/vnd.ms-excel.sheet.macroEnabled.12',
    'application/vnd.oasis.opendocument.spreadsheet'
]


def handle_remove_readonly(func, path, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Windows"""
    import stat
    os.chmod(path, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)  # 0777
    func(path)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (id INTEGER PRIMARY KEY,
                      username TEXT,
                      created_at TIMESTAMP)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS files
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      filename TEXT,
                      uploaded_at TIMESTAMP,
                      FOREIGN KEY(user_id) REFERENCES users(id))''')
    conn.commit()
    conn.close()


init_db()


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def log_user(user_id, username):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''INSERT OR IGNORE INTO users (id, username, created_at)
                     VALUES (?, ?, ?)''',
                   (user_id, username, datetime.now()))
    conn.commit()
    conn.close()


def log_file(user_id, filename):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO files (user_id, filename, uploaded_at)
                     VALUES (?, ?, ?)''',
                   (user_id, filename, datetime.now()))
    conn.commit()
    conn.close()


def get_file_count(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''SELECT COUNT(*) FROM files WHERE user_id = ?''', (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count


def delete_user_files(user_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''DELETE FROM files WHERE user_id = ?''', (user_id,))
    conn.commit()
    conn.close()
    logger.info(f"–£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ë–î")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel
def process_excel(file_path: str) -> pd.DataFrame:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    try:
        ext = os.path.splitext(file_path)[1].lower()
        engine_map = {
            '.xlsx': 'openpyxl',
            '.xls': 'xlrd',
            '.xlsm': 'openpyxl',
            '.xlsb': 'pyxlsb',
            '.ods': 'odf',
        }
        df = pd.read_excel(file_path, engine=engine_map.get(ext, None))
        logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: {file_path}")

        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        name_col = next((col for col in df.columns
                         if any(kw in col.lower() for kw in ["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "—Ç–æ–≤–∞—Ä"])), None)
        price_col = next((col for col in df.columns
                          if any(kw in col.lower() for kw in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å"])), None)

        if not name_col or not price_col:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –¶–µ–Ω–∞)")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = df.rename(columns={name_col: "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", price_col: "–¶–µ–Ω–∞"})
        df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"] = df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].astype(str).str.strip()

        if "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" not in df.columns:
            df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = 0

        return df[["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞"]]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {str(e)}", exc_info=True)
        raise


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def handle_document(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        user = update.message.from_user
        document = update.message.document
        log_user(user.id, user.username)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(document.file_name)[1].lower()[1:]
        if file_ext not in EXCEL_EXTENSIONS:
            await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª—ã!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤
        file_count = get_file_count(user.id)
        if file_count >= MAX_FILES_PER_USER:
            await update.message.reply_text(f"‚ùå –õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ ({MAX_FILES_PER_USER}) –∏—Å—á–µ—Ä–ø–∞–Ω!")
            return

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await context.bot.get_file(document)
        user_dir = os.path.join(TEMP_DIR, str(user.id))
        file_path = os.path.join(user_dir, document.file_name)

        os.makedirs(user_dir, exist_ok=True, mode=0o777)
        await file.download_to_drive(file_path)

        log_file(user.id, document.file_name)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        df = process_excel(file_path)
        context.user_data.setdefault('files', {})[file_path] = df
        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω! ({file_count + 1}/{MAX_FILES_PER_USER}) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ /report")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}", exc_info=True)


async def send_report(update: Update, context: CallbackContext) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        user = update.message.from_user
        if not context.user_data.get('files'):
            await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã!")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        with pd.ExcelWriter(RESULT_FILE, engine='openpyxl') as writer:
            start_col = 0
            for file_path, df in context.user_data['files'].items():
                pd.DataFrame([[os.path.basename(file_path)]]).to_excel(
                    writer,
                    startrow=0,
                    startcol=start_col,
                    index=False,
                    header=False
                )
                df.to_excel(
                    writer,
                    startrow=3,
                    startcol=start_col,
                    index=False,
                    header=False
                )
                start_col += 4

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        keyboard = [[InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data='detailed_report')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        await update.message.reply_document(
            document=open(RESULT_FILE, 'rb'),
            caption="üìä –í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!\n–î–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /newreport",
            filename="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ_—Ü–µ–Ω.xlsx",
            reply_markup=reply_markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        context.user_data['raw_data'] = {
            file_path: df.copy()
            for file_path, df in context.user_data['files'].items()
        }

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in context.user_data['files']:
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")

        if os.path.exists(RESULT_FILE):
            os.remove(RESULT_FILE)

        del context.user_data['files']
        delete_user_files(user.id)
        logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    except Exception as e:
        await update.message.reply_text(f"üî• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)


async def detailed_report_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    try:
        user = query.from_user
        if 'raw_data' not in context.user_data:
            await query.message.reply_text("‚ö† –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω DataFrame
        all_data = []
        for file_path, df in context.user_data['raw_data'].items():
            temp_df = df.copy()
            temp_df['–ò—Å—Ç–æ—á–Ω–∏–∫'] = os.path.basename(file_path)
            all_data.append(temp_df)

        full_df = pd.concat(all_data, ignore_index=True)

        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        analysis = full_df.groupby('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ').agg({
            '–¶–µ–Ω–∞': ['min', 'max', 'mean', 'count'],
            '–ò—Å—Ç–æ—á–Ω–∏–∫': lambda x: ', '.join(x)
        }).reset_index()

        analysis.columns = [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞',
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞',
            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
            '–ò—Å—Ç–æ—á–Ω–∏–∫–∏'
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö —Å –º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω–∞–º–∏
        min_sources = full_df.loc[full_df.groupby('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')['–¶–µ–Ω–∞'].idxmin()][['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ò—Å—Ç–æ—á–Ω–∏–∫']]
        max_sources = full_df.loc[full_df.groupby('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')['–¶–µ–Ω–∞'].idxmax()][['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ò—Å—Ç–æ—á–Ω–∏–∫']]

        analysis = analysis.merge(
            min_sources.rename(columns={'–ò—Å—Ç–æ—á–Ω–∏–∫': '–ü—Ä–æ–¥–∞–≤–µ—Ü —Å –º–∏–Ω. —Ü–µ–Ω–æ–π'}),
            on='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'
        ).merge(
            max_sources.rename(columns={'–ò—Å—Ç–æ—á–Ω–∏–∫': '–ü—Ä–æ–¥–∞–≤–µ—Ü —Å –º–∞–∫—Å. —Ü–µ–Ω–æ–π'}),
            on='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'
        )

        # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º
        report_file = "detailed_analysis.xlsx"
        with pd.ExcelWriter(report_file, engine='openpyxl') as writer:
            analysis.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞', index=False)
            full_df.to_excel(writer, sheet_name='–í—Å–µ –¥–∞–Ω–Ω—ã–µ', index=False)

            stats = pd.DataFrame({
                '–ú–µ—Ç—Ä–∏–∫–∞': [
                    '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤',
                    '–¢–æ–≤–∞—Ä—ã —Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º',
                    '–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–±—Ä–æ—Å —Ü–µ–Ω',
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å —Ü–µ–Ω'
                ],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    len(analysis),
                    sum(analysis['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'] == 1),
                    (analysis['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'] - analysis['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞']).mean(),
                    (analysis['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'] - analysis['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞']).max()
                ]
            })
            stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=open(report_file, 'rb'),
            caption="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω\n"
                    "–°–æ–¥–µ—Ä–∂–∏—Ç:\n"
                    "1. –°–≤–æ–¥–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º\n"
                    "2. –í—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                    "3. –û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            filename="–ü–æ–¥—Ä–æ–±–Ω—ã–π_–∞–Ω–∞–ª–∏–∑_—Ü–µ–Ω.xlsx"
        )

        # –û—á–∏—Å—Ç–∫–∞
        os.remove(report_file)
        del context.user_data['raw_data']

    except Exception as e:
        await query.message.reply_text(f"üî• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ detailed_report: {str(e)}", exc_info=True)


async def new_report(update: Update, context: CallbackContext) -> None:
    """–°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    try:
        user = update.message.from_user
        user_dir = os.path.join(TEMP_DIR, str(user.id))

        if os.path.exists(user_dir):
            try:
                time.sleep(1)
                shutil.rmtree(user_dir, onerror=handle_remove_readonly)
                logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {user_dir} —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")
                raise

        context.user_data.pop('files', None)
        delete_user_files(user.id)

        await update.message.reply_text(
            "üÜï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞!\n"
            f"–õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤: {MAX_FILES_PER_USER}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ new_report: {str(e)}", exc_info=True)


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    file_count = get_file_count(user.id)

    message_text = (
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {file_count}/{MAX_FILES_PER_USER}\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: " + ", ".join(EXCEL_EXTENSIONS) + "\n\n"
                                                                       "–ö–æ–º–∞–Ω–¥—ã:\n"
                                                                       "/newreport - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
                                                                       "/report - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
    )

    if file_count > 0:
        message_text += "\n\n‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–∞–π–ª—ã. –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newreport"

    await update.message.reply_text(message_text)


def main():
    application = Application.builder().token(TOKEN).build()

    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    ext_filters = filters.Document.FileExtension(EXCEL_EXTENSIONS[0])
    for ext in EXCEL_EXTENSIONS[1:]:
        ext_filters |= filters.Document.FileExtension(ext)
    doc_filter = ext_filters | filters.Document.MimeType(SUPPORTED_MIME_TYPES)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("report", send_report))
    application.add_handler(CommandHandler("newreport", new_report))
    application.add_handler(MessageHandler(doc_filter, handle_document))
    application.add_handler(CallbackQueryHandler(detailed_report_callback, pattern='^detailed_report$'))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == '__main__':
    os.makedirs(TEMP_DIR, exist_ok=True, mode=0o777)
    main()